#!/usr/bin/env python
import rospy

from kalman_filter import kalman
import numpy as np
from pycopter.srv import DroneSwarmMultiArray
import std_msgs.msg
from controller import array_operations

class KalmanFilter:

    def __init__(self):
        rospy.init_node('kalman_filter')
        rospy.loginfo("kalman_filter node created")
        self.pycopter_start = False
        # Pycopter position and velocity subscriber
        rospy.Subscriber("pycopter/positions", std_msgs.msg.Float64MultiArray, self.pos_cb, queue_size = 1)
        rospy.Subscriber("pycopter/velocities", std_msgs.msg.Float64MultiArray, self.vel_cb, queue_size= 10)
        # floatmultiarray from .py simulator

        # create pattern example
        self.kalman_pub = rospy.Publisher("kalman/pos_estimation", std_msgs.msg.Float64MultiArray, queue_size = 1)

        #self.pattern = np.array([[-1, 0.5, -1, 0.7],
                                 #[0.5, -1, 0.4, 1.3],
                                 #[-1, 0.4, -1, 0.8],
                                 #[0.7, 1.3, 0.8, -1]])
        #rospy.loginfo("pattern shape: ", self.pattern)
        self.pattern = []
        self.nr_drones = None
        self.kf = []
        self.timestamp = 0.0
        self.previous = 0.0

        ## MULTIARRAY OUTPUT x1,y1, x2,y2

        #self.states_drones = [0, 0, 1.5, 2.3, 4, 2, 1, 1]
        #self.velocities_drones = [0, 0, -1.5, 0.5, 1, -2, 1.5, 0.1]
        self.states_drones = None
        self.velocities_drones = np.array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1])
        self.kalman_positions_estimation = np.array([])
        self.error_col = 0
        self.error_matrix = []
        self.nr_kalman_filters = 0
        self.kalman_positions_matrix = []
        #self.state= [x1,y1,x2,y2,x3,y3 ...] size = nr_drones
        #self.relative_state
        # self.vel = [v1,v2,v3,v4 ...] size = nr_drones

        # Pattern generator service call
        # create a service
        # add_two_ints = rospy.ServiceProxy('service_pattern', my_package.srv.Foo)

        # request service
        #rospy.wait_for_service('add_two_ints')
        #add_two_ints = rospy.ServiceProxy('add_two_ints', AddTwoInts)
        #try:
        #resp1 = add_two_ints(x, y)
        #except rospy.ServiceException as exc:
        #  print("Service did not process request: " + str(exc))
        rospy.loginfo("Waiting for supervisor service")
        rospy.wait_for_service("/supervisor/kalman")
        rospy.loginfo("Online")

        try:
            setup_kalman = rospy.ServiceProxy("supervisor/kalman", DroneSwarmMultiArray)
            resp = setup_kalman(True)
            self.nr_drones = resp.n_rows
            connections = resp.data
            rospy.loginfo("Number of drones: ")
            rospy.loginfo(self.nr_drones)

            rospy.loginfo("Data: ")
            rospy.loginfo(connections)

        except rospy.ServiceException as e:
            print("Service call failed: {}".format(e))
            return
            # Initial conditions
        self.id = np.zeros((self.nr_drones * self.nr_drones, 2))
        self.kalman_matrix = np.zeros((self.nr_drones, self.nr_drones))
        self.pattern = array_operations.multiarray2np_sqr(resp)
        rospy.loginfo("Pattern input as matrix: ")
        rospy.loginfo(self.pattern)
        self.create_kalman_filters()
        self.loop()

    def loop(self):
        while not self.pycopter_start:
            pass
        rate = rospy.Rate(40)
        while not rospy.is_shutdown():
            #print('TIMESTAMP:', self.timestamp)
            #print('PREVIOUS TIME STAMP: ', self.previous)
            differential_timestamp = float((self.timestamp - self.previous)/1000.0)
            print('DIFFERENTIAL_TIMESTAMP DT:', differential_timestamp)
            self.previous = self.timestamp
            self.kalman_calculations(differential_timestamp)
            self.error_col = self.error_col + 1

            self.kalman_publisher()

            rate.sleep()
        if rospy.is_shutdown():
            pass
            #print("ERROR MATRIX", self.error_matrix)

    def kalman_publisher(self):
        kalman_multiarray = array_operations.np2multiarray_3D(
                self.kalman_positions_matrix, self.nr_drones)

        kalman_multiarray.layout.data_offset = self.timestamp
        #rospy.loginfo("Kalman_OUTPUT:")
        #rospy.loginfo(self.kalman_positions_estimation)
        #print('KALMAN PUBLISHER', kalman_multiarray)
        self.kalman_pub.publish(kalman_multiarray)
        #print('KALMAN MOTHERFUCKER MESSAGE:', kalman_multiarray.data)

    def pos_cb(self, pos_msg):

        self.states_drones = pos_msg.data
        self.pycopter_start = True
        #rospy.loginfo("START BOOL: %d"%(self.pycopter_start))

    def vel_cb(self, vel_msg):
        
        #print('vel_msg', vel_msg)
        self.velocities_drones = vel_msg.data
        self.timestamp = vel_msg.layout.data_offset
        #print('VEL CALLBACK: ', self.velocities_drones)

    def create_kalman_filters(self):

        drones = self.nr_drones
        # Here we create the kalman filters that we need for our drone to estimate the other drone distance.
        self.nr_kalman_filters = 0
        # we estimate the position of ALL other drones # job is sending a matrix of nr_drones x nr_drones, so we've to check the row and if it differs -1 we will create the kf filter
        for i in range(drones):
            #rospy.loginfo("number of drone with kalman: ")
            #print(i)
            for j in range(drones):

                if not self.pattern[i][j] == -1:
                    #rospy.loginfo("number of drone connected: ")
                    self.kf.append(kalman.Kalman())
                    self.id[self.nr_kalman_filters][0] = i
                    self.id[self.nr_kalman_filters][1] = j
                    self.nr_kalman_filters = self.nr_kalman_filters + 1
        #rospy.loginfo("number of kalman filters: ")
        self.error_matrix = np.zeros((self.nr_kalman_filters, 1))
        print(self.nr_kalman_filters)
        print('ID:', self.id)

    def kalman_calculations(self, dt):

        count = 0
        #print('STATE: ', self.states_drones)
        #print('Velocities measured: ', self.velocities_drones)

        relative_velocities = np.array([[0.0, 0.0]]).T
        state_simulator = np.array([[0.0, 0.0]]).T
        #self.kalman_positions_estimation = np.zeros((self.nr_drones*self.nr_drones*2), dtype =float)
        self.kalman_positions_matrix = np.zeros((self.nr_drones, self.nr_drones*2))
        #print('KALMAN MATRIX: ', self.kalman_positions_matrix)
        error = np.array([0.0])
        error_vector = np.zeros((self.nr_kalman_filters, 1))
        for i, kalman_loop in enumerate(self.kf):
            # KALMAN FILTER FROM CONNECTION id_drone to id_estimation
            id_drone = int(self.id[count][0])
            id_estimation = int(self.id[count][1])
            #print('id_drone: ', id_drone)
            #print('id_estimation: ', id_estimation)
            #print('X OF CONNECTION FROM: ', self.states_drones[2*id_drone])
            #print('X OF CONNECTION TO: ', self.states_drones[2*id_estimation])

            #print('Y OF CONNECTION FROM: ', self.states_drones[(2*id_drone) + 1])
            #print('Y OF CONNECTION TO: ', self.states_drones[(2*id_estimation) + 1])

            # RELATIVE POSITIONS (END - START)
            relative_x = self.states_drones[2*id_estimation] - self.states_drones[2*id_drone]
            relative_y = self.states_drones[(2*id_estimation) + 1] - self.states_drones[(2*id_drone) + 1]

            state_simulator[0] = relative_x
            state_simulator[1] = relative_y
            #print('RELATIVE POSITIONS: ', state_simulator)

            #  RELATIVE VELOCITIES
            velocity_relative_x = self.velocities_drones[2*id_drone] - self.velocities_drones[2*id_estimation]
            velocity_relative_y = self.velocities_drones[(2*id_drone)+1] - self.velocities_drones[2*id_estimation]
            relative_velocities[0] = velocity_relative_x
            relative_velocities[1] = velocity_relative_y
            #print('V_REL X: ', relative_velocities[0])
            #print('V_REL Y: ', relative_velocities[1])

            distance_sensor = kalman_loop.distance(relative_x, relative_y)
            kalman_loop.variance_calculation(kalman_loop.cov_P)
            kalman_loop.predict(state_simulator, relative_velocities, dt)
            kalman_loop.update(state_simulator, distance_sensor)
            #self.kalman_positions_estimation = np.concatenate((self.kalman_positions_estimation,kalman_loop.state_X[0], kalman_loop.state_X[1]))
            self.kalman_positions_matrix[id_drone][id_estimation*2] = kalman_loop.state_X[0][0]
            self.kalman_positions_matrix[id_drone][(id_estimation*2)+1] = kalman_loop.state_X[1][0]



            #rospy.loginfo("######### OUTPUT KF #########")
            #print('KALMAN NUMBER: ', self.kalman_positions_matrix)
            #print('POSITION X: ', kalman_loop.state_X[0])
            #print('POSITION Y: ', kalman_loop.state_X[1])

            #rospy.loginfo("estimation in X :")
            #rospy.loginfo(kalman_loop.state_X[0])
            #rospy.loginfo("estimation in Y :")
            #rospy.loginfo(kalman_loop.state_X[0])
            #rospy.loginfo("APPEND TEST:")
            #rospy.loginfo(self.kalman_positions_estimation)


            distance_prediction = kalman_loop.distance(kalman_loop.state_X[0][0], kalman_loop.state_X[1][0])
            #print('DISTANCE PREDICTION', distance_prediction)
            #print('DISTANCE SENSOR', distance_sensor)
            error = kalman_loop.err_class
            #print('ERROR: ', error)
            #self.kalman_matrix[id_drone][id_estimation] = distance_prediction for generating matrix
            error_vector[count][0] = error

            #print('ERRROR_VECTOR SHAPE: ')
            #print(error_vector.shape)

            #print('distance_prediction: ')
            #print(distance_prediction)

           # print('relative _ x : ')
           # print(relative_x)
           # print('relative _ y : ')
           # print(relative_y)
            count = count + 1

        #for j in range(self.nr_drones):
            #for k in range(self.nr_drones * 2):
                #self.kalman_positions_estimation.np.append(self.kalman_positions_matrix[j][k])
                #index = index +1
        #self.kalman_positions_estimation = self.kalman_positions_estimation.transpose()
       # print('ERROR_MATRIX SHAPE: ')
       # print(self.error_matrix.shape)
        self.error_matrix= np.column_stack((self.error_matrix, error_vector))
        #print('ERROR_MATRIX SHAPE: ')
        #print(self.error_matrix.shape)
        print('MATRIX KALMAN: ', self.kalman_positions_matrix)
        #rospy.loginfo("######### OUTPUT KF JAVI #########")
        #rospy.loginfo("estimation in ALL VECTOR :")
        #rospy.loginfo(self.kalman_positions_estimation)


if __name__ == "__main__":
    KalmanFilter()

